// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth_predicate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "expression/auth_predicate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ac {
namespace serialization {

namespace {

const ::google::protobuf::Descriptor* Predicate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Predicate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Predicate_PredicateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ComparisonPredicate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComparisonPredicate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ComparisonPredicate_Comparison_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NegationPredicate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NegationPredicate_reflection_ = NULL;
const ::google::protobuf::Descriptor* PredicateWithList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredicateWithList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_auth_5fpredicate_2eproto() {
  protobuf_AddDesc_auth_5fpredicate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "auth_predicate.proto");
  GOOGLE_CHECK(file != NULL);
  Predicate_descriptor_ = file->message_type(0);
  static const int Predicate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, predicate_type_),
  };
  Predicate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Predicate_descriptor_,
      Predicate::default_instance_,
      Predicate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Predicate, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Predicate));
  Predicate_PredicateType_descriptor_ = Predicate_descriptor_->enum_type(0);
  ComparisonPredicate_descriptor_ = file->message_type(1);
  static const int ComparisonPredicate_offsets_[1] = {
  };
  ComparisonPredicate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComparisonPredicate_descriptor_,
      ComparisonPredicate::default_instance_,
      ComparisonPredicate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComparisonPredicate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComparisonPredicate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComparisonPredicate));
  ComparisonPredicate_Comparison_descriptor_ = ComparisonPredicate_descriptor_->enum_type(0);
  NegationPredicate_descriptor_ = file->message_type(2);
  static const int NegationPredicate_offsets_[1] = {
  };
  NegationPredicate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NegationPredicate_descriptor_,
      NegationPredicate::default_instance_,
      NegationPredicate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegationPredicate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegationPredicate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NegationPredicate));
  PredicateWithList_descriptor_ = file->message_type(3);
  static const int PredicateWithList_offsets_[1] = {
  };
  PredicateWithList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PredicateWithList_descriptor_,
      PredicateWithList::default_instance_,
      PredicateWithList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateWithList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredicateWithList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PredicateWithList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_auth_5fpredicate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Predicate_descriptor_, &Predicate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComparisonPredicate_descriptor_, &ComparisonPredicate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NegationPredicate_descriptor_, &NegationPredicate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PredicateWithList_descriptor_, &PredicateWithList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_auth_5fpredicate_2eproto() {
  delete Predicate::default_instance_;
  delete Predicate_reflection_;
  delete ComparisonPredicate::default_instance_;
  delete ComparisonPredicate_reflection_;
  delete NegationPredicate::default_instance_;
  delete NegationPredicate_reflection_;
  delete PredicateWithList::default_instance_;
  delete PredicateWithList_reflection_;
}

void protobuf_AddDesc_auth_5fpredicate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ac::serialization::protobuf_AddDesc_attrval_5fmsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024auth_predicate.proto\022\020ac.serialization"
    "\032\021attrval_msg.proto\"\276\001\n\tPredicate\022A\n\016pre"
    "dicate_type\030\001 \002(\0162).ac.serialization.Pre"
    "dicate.PredicateType\"d\n\rPredicateType\022\010\n"
    "\004TRUE\020\000\022\t\n\005FALSE\020\001\022\016\n\nCOMPARISON\020\002\022\014\n\010NE"
    "GATION\020\003\022\017\n\013CONJUNCTION\020\004\022\017\n\013DISJUNCTION"
    "\020\005*\010\010 \020\200\200\200\200\002\"\263\002\n\023ComparisonPredicate\">\n\n"
    "Comparison\022\t\n\005EQUAL\020\000\022\013\n\007GREATER\020\001\022\010\n\004LE"
    "SS\020\002\022\006\n\002GE\020\003\022\006\n\002LE\020\0042a\n\ncomparison\022\033.ac."
    "serialization.Predicate\030` \001(\01620.ac.seria"
    "lization.ComparisonPredicate.Comparison2"
    "-\n\010col_attr\022\033.ac.serialization.Predicate"
    "\030a \001(\t2J\n\007attrval\022\033.ac.serialization.Pre"
    "dicate\030b \001(\0132\034.ac.serialization.AttrValM"
    "sg\"_\n\021NegationPredicate2J\n\007operand\022\033.ac."
    "serialization.Predicate\030\200\001 \001(\0132\033.ac.seri"
    "alization.Predicate\"`\n\021PredicateWithList"
    "2K\n\010operands\022\033.ac.serialization.Predicat"
    "e\030\240\001 \003(\0132\033.ac.serialization.Predicate", 757);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "auth_predicate.proto", &protobuf_RegisterTypes);
  Predicate::default_instance_ = new Predicate();
  ComparisonPredicate::default_instance_ = new ComparisonPredicate();
  NegationPredicate::default_instance_ = new NegationPredicate();
  PredicateWithList::default_instance_ = new PredicateWithList();
  Predicate::default_instance_->InitAsDefaultInstance();
  ComparisonPredicate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterEnumExtension(
    &::ac::serialization::Predicate::default_instance(),
    96, 14, false, false,
    &::ac::serialization::ComparisonPredicate_Comparison_IsValid);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::ac::serialization::Predicate::default_instance(),
    97, 9, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ac::serialization::Predicate::default_instance(),
    98, 11, false, false,
    &::ac::serialization::AttrValMsg::default_instance());
  NegationPredicate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ac::serialization::Predicate::default_instance(),
    128, 11, false, false,
    &::ac::serialization::Predicate::default_instance());
  PredicateWithList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::ac::serialization::Predicate::default_instance(),
    160, 11, true, false,
    &::ac::serialization::Predicate::default_instance());
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_auth_5fpredicate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_auth_5fpredicate_2eproto {
  StaticDescriptorInitializer_auth_5fpredicate_2eproto() {
    protobuf_AddDesc_auth_5fpredicate_2eproto();
  }
} static_descriptor_initializer_auth_5fpredicate_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Predicate_PredicateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Predicate_PredicateType_descriptor_;
}
bool Predicate_PredicateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Predicate_PredicateType Predicate::TRUE;
const Predicate_PredicateType Predicate::FALSE;
const Predicate_PredicateType Predicate::COMPARISON;
const Predicate_PredicateType Predicate::NEGATION;
const Predicate_PredicateType Predicate::CONJUNCTION;
const Predicate_PredicateType Predicate::DISJUNCTION;
const Predicate_PredicateType Predicate::PredicateType_MIN;
const Predicate_PredicateType Predicate::PredicateType_MAX;
const int Predicate::PredicateType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Predicate::kPredicateTypeFieldNumber;
#endif  // !_MSC_VER

Predicate::Predicate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ac.serialization.Predicate)
}

void Predicate::InitAsDefaultInstance() {
}

Predicate::Predicate(const Predicate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ac.serialization.Predicate)
}

void Predicate::SharedCtor() {
  _cached_size_ = 0;
  predicate_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Predicate::~Predicate() {
  // @@protoc_insertion_point(destructor:ac.serialization.Predicate)
  SharedDtor();
}

void Predicate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Predicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Predicate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Predicate_descriptor_;
}

const Predicate& Predicate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fpredicate_2eproto();
  return *default_instance_;
}

Predicate* Predicate::default_instance_ = NULL;

Predicate* Predicate::New() const {
  return new Predicate;
}

void Predicate::Clear() {
  _extensions_.Clear();
  predicate_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Predicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ac.serialization.Predicate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ac.serialization.Predicate.PredicateType predicate_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ac::serialization::Predicate_PredicateType_IsValid(value)) {
            set_predicate_type(static_cast< ::ac::serialization::Predicate_PredicateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((256u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ac.serialization.Predicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ac.serialization.Predicate)
  return false;
#undef DO_
}

void Predicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ac.serialization.Predicate)
  // required .ac.serialization.Predicate.PredicateType predicate_type = 1;
  if (has_predicate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->predicate_type(), output);
  }

  // Extension range [32, 536870912)
  _extensions_.SerializeWithCachedSizes(
      32, 536870912, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ac.serialization.Predicate)
}

::google::protobuf::uint8* Predicate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ac.serialization.Predicate)
  // required .ac.serialization.Predicate.PredicateType predicate_type = 1;
  if (has_predicate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->predicate_type(), target);
  }

  // Extension range [32, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      32, 536870912, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ac.serialization.Predicate)
  return target;
}

int Predicate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ac.serialization.Predicate.PredicateType predicate_type = 1;
    if (has_predicate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->predicate_type());
    }

  }
  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Predicate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Predicate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Predicate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Predicate::MergeFrom(const Predicate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_predicate_type()) {
      set_predicate_type(from.predicate_type());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Predicate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Predicate::CopyFrom(const Predicate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Predicate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Predicate::Swap(Predicate* other) {
  if (other != this) {
    std::swap(predicate_type_, other->predicate_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Predicate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Predicate_descriptor_;
  metadata.reflection = Predicate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ComparisonPredicate_Comparison_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComparisonPredicate_Comparison_descriptor_;
}
bool ComparisonPredicate_Comparison_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ComparisonPredicate_Comparison ComparisonPredicate::EQUAL;
const ComparisonPredicate_Comparison ComparisonPredicate::GREATER;
const ComparisonPredicate_Comparison ComparisonPredicate::LESS;
const ComparisonPredicate_Comparison ComparisonPredicate::GE;
const ComparisonPredicate_Comparison ComparisonPredicate::LE;
const ComparisonPredicate_Comparison ComparisonPredicate::Comparison_MIN;
const ComparisonPredicate_Comparison ComparisonPredicate::Comparison_MAX;
const int ComparisonPredicate::Comparison_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ComparisonPredicate::kComparisonFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ac::serialization::Predicate,
    ::google::protobuf::internal::EnumTypeTraits< ::ac::serialization::ComparisonPredicate_Comparison, ::ac::serialization::ComparisonPredicate_Comparison_IsValid>, 14, false >
  ComparisonPredicate::comparison(kComparisonFieldNumber, static_cast< ::ac::serialization::ComparisonPredicate_Comparison >(0));
const ::std::string ComparisonPredicate_col_attr_default("");
#ifndef _MSC_VER
const int ComparisonPredicate::kColAttrFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ac::serialization::Predicate,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  ComparisonPredicate::col_attr(kColAttrFieldNumber, ComparisonPredicate_col_attr_default);
#ifndef _MSC_VER
const int ComparisonPredicate::kAttrvalFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ac::serialization::Predicate,
    ::google::protobuf::internal::MessageTypeTraits< ::ac::serialization::AttrValMsg >, 11, false >
  ComparisonPredicate::attrval(kAttrvalFieldNumber, ::ac::serialization::AttrValMsg::default_instance());
ComparisonPredicate::ComparisonPredicate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ac.serialization.ComparisonPredicate)
}

void ComparisonPredicate::InitAsDefaultInstance() {
}

ComparisonPredicate::ComparisonPredicate(const ComparisonPredicate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ac.serialization.ComparisonPredicate)
}

void ComparisonPredicate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComparisonPredicate::~ComparisonPredicate() {
  // @@protoc_insertion_point(destructor:ac.serialization.ComparisonPredicate)
  SharedDtor();
}

void ComparisonPredicate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComparisonPredicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComparisonPredicate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComparisonPredicate_descriptor_;
}

const ComparisonPredicate& ComparisonPredicate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fpredicate_2eproto();
  return *default_instance_;
}

ComparisonPredicate* ComparisonPredicate::default_instance_ = NULL;

ComparisonPredicate* ComparisonPredicate::New() const {
  return new ComparisonPredicate;
}

void ComparisonPredicate::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComparisonPredicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ac.serialization.ComparisonPredicate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ac.serialization.ComparisonPredicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ac.serialization.ComparisonPredicate)
  return false;
#undef DO_
}

void ComparisonPredicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ac.serialization.ComparisonPredicate)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ac.serialization.ComparisonPredicate)
}

::google::protobuf::uint8* ComparisonPredicate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ac.serialization.ComparisonPredicate)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ac.serialization.ComparisonPredicate)
  return target;
}

int ComparisonPredicate::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComparisonPredicate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComparisonPredicate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComparisonPredicate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComparisonPredicate::MergeFrom(const ComparisonPredicate& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComparisonPredicate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComparisonPredicate::CopyFrom(const ComparisonPredicate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComparisonPredicate::IsInitialized() const {

  return true;
}

void ComparisonPredicate::Swap(ComparisonPredicate* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComparisonPredicate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComparisonPredicate_descriptor_;
  metadata.reflection = ComparisonPredicate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int NegationPredicate::kOperandFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ac::serialization::Predicate,
    ::google::protobuf::internal::MessageTypeTraits< ::ac::serialization::Predicate >, 11, false >
  NegationPredicate::operand(kOperandFieldNumber, ::ac::serialization::Predicate::default_instance());
NegationPredicate::NegationPredicate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ac.serialization.NegationPredicate)
}

void NegationPredicate::InitAsDefaultInstance() {
}

NegationPredicate::NegationPredicate(const NegationPredicate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ac.serialization.NegationPredicate)
}

void NegationPredicate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NegationPredicate::~NegationPredicate() {
  // @@protoc_insertion_point(destructor:ac.serialization.NegationPredicate)
  SharedDtor();
}

void NegationPredicate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NegationPredicate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NegationPredicate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NegationPredicate_descriptor_;
}

const NegationPredicate& NegationPredicate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fpredicate_2eproto();
  return *default_instance_;
}

NegationPredicate* NegationPredicate::default_instance_ = NULL;

NegationPredicate* NegationPredicate::New() const {
  return new NegationPredicate;
}

void NegationPredicate::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NegationPredicate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ac.serialization.NegationPredicate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ac.serialization.NegationPredicate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ac.serialization.NegationPredicate)
  return false;
#undef DO_
}

void NegationPredicate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ac.serialization.NegationPredicate)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ac.serialization.NegationPredicate)
}

::google::protobuf::uint8* NegationPredicate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ac.serialization.NegationPredicate)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ac.serialization.NegationPredicate)
  return target;
}

int NegationPredicate::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NegationPredicate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NegationPredicate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NegationPredicate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NegationPredicate::MergeFrom(const NegationPredicate& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NegationPredicate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NegationPredicate::CopyFrom(const NegationPredicate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NegationPredicate::IsInitialized() const {

  return true;
}

void NegationPredicate::Swap(NegationPredicate* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NegationPredicate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NegationPredicate_descriptor_;
  metadata.reflection = NegationPredicate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PredicateWithList::kOperandsFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::ac::serialization::Predicate,
    ::google::protobuf::internal::RepeatedMessageTypeTraits< ::ac::serialization::Predicate >, 11, false >
  PredicateWithList::operands(kOperandsFieldNumber, ::ac::serialization::Predicate::default_instance());
PredicateWithList::PredicateWithList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ac.serialization.PredicateWithList)
}

void PredicateWithList::InitAsDefaultInstance() {
}

PredicateWithList::PredicateWithList(const PredicateWithList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ac.serialization.PredicateWithList)
}

void PredicateWithList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredicateWithList::~PredicateWithList() {
  // @@protoc_insertion_point(destructor:ac.serialization.PredicateWithList)
  SharedDtor();
}

void PredicateWithList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PredicateWithList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredicateWithList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredicateWithList_descriptor_;
}

const PredicateWithList& PredicateWithList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auth_5fpredicate_2eproto();
  return *default_instance_;
}

PredicateWithList* PredicateWithList::default_instance_ = NULL;

PredicateWithList* PredicateWithList::New() const {
  return new PredicateWithList;
}

void PredicateWithList::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PredicateWithList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ac.serialization.PredicateWithList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ac.serialization.PredicateWithList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ac.serialization.PredicateWithList)
  return false;
#undef DO_
}

void PredicateWithList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ac.serialization.PredicateWithList)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ac.serialization.PredicateWithList)
}

::google::protobuf::uint8* PredicateWithList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ac.serialization.PredicateWithList)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ac.serialization.PredicateWithList)
  return target;
}

int PredicateWithList::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredicateWithList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PredicateWithList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PredicateWithList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PredicateWithList::MergeFrom(const PredicateWithList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PredicateWithList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredicateWithList::CopyFrom(const PredicateWithList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredicateWithList::IsInitialized() const {

  return true;
}

void PredicateWithList::Swap(PredicateWithList* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PredicateWithList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredicateWithList_descriptor_;
  metadata.reflection = PredicateWithList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialization
}  // namespace ac

// @@protoc_insertion_point(global_scope)
